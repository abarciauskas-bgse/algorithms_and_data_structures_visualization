{
  "name": "Data Structures",
  "children": [
    {
      "name": "Algorithms",
      "children": [
        {
          "name": "Iteration",
          "children": [
            {
              "name": "Eval Rev Polish Notation",
              "url": "https://github.com/abarciauskas-bgse/code_kata/blob/master/data_structures/classics/test_eval_reverse_polish.py",
              "dependsOn": [
                "Stack"
              ],
              "technos": [],
              "host": {}
            },
            {
              "name": "Recursion",
              "url": "",
              "dependsOn": [],
              "technos": [],
              "host": {},
              "children": [
                {
                  "name": "Divide and Conquer",
                  "children": [
                    {
                      "name": "merge sort",
                      "comments": "O(n log n)",
                      "url": "https://github.com/abarciauskas-bgse/code_kata/blob/master/algorithms_design_and_analysis/merge_sort.py"
                    }
                  ]
                },
                {
                  "name": "Tower of Hanoi",
                  "url": "https://github.com/abarciauskas-bgse/code_kata/blob/master/interactive_python/towerOfHanoi.py"
                },
                {
                  "name": "recursive addition",
                  "url": "https://github.com/abarciauskas-bgse/code_kata/blob/master/interactive_python/recursiveAddition.py"
                },
                {
                  "name": "Master Method",
                  "comments": "T(n) <= a T(n/b) + O(n**d)\nn - size of problem,\na - # of subproblems in recursion (e.g. 2 for merge sort)\nn/b - size of subproblem (e.g. 2 for merge sort)\nd - work down outside recursive call\n\nAssumption: size of subproblem is always the same",
                  "children": [
                    {
                      "name": "Case 1: a = b**d",
                      "comments": "O(n**d log n)"
                    },
                    {
                      "name": "Case 2: a < b**d",
                      "comments": "O(n**d)"
                    },
                    {
                      "name": "Case 3: a > b**d",
                      "comments": "O(n ** (log_b a))"
                    }
                  ]
                }
              ]
            }
          ],
          "dependsOn": []
        },
        {
          "name": "System Design",
          "children": [
            {
              "name": "Alerts"
            },
            {
              "name": "Favorites"
            }
          ],
          "dependsOn": []
        },
        {
          "name": "Bit Manipulation"
        }
      ]
    },
    {
      "name": "Graphs",
      "children": [
        {
          "name": "Trees",
          "children": [
            {
              "name": "Binary Tree",
              "children": [
                {
                  "name": "Motivations",
                  "comments": "Fast search, fast insert and delete (combined pros of ordered array and linked list)"
                },
                {
                  "name": "Uses"
                },
                {
                  "name": "insert (bt)",
                  "comments": "Balanced -> O(log n)\nUnbalanced -> O(n) (average O(log n))"
                },
                {
                  "name": "search (bt)",
                  "comments": "O(log n)"
                },
                {
                  "name": "traversals",
                  "children": [
                    {
                      "name": "preorder"
                    },
                    {
                      "name": "inorder"
                    },
                    {
                      "name": "postorder"
                    }
                  ]
                }
              ],
              "comments": "",
              "url": "https://github.com/abarciauskas-bgse/code_kata/blob/master/data_structures/binary_tree.py"
            },
            {
              "name": "RedBlack Tree"
            },
            {
              "name": "Heap"
            }
          ],
          "url": "",
          "dependsOn": [],
          "technos": [],
          "host": {}
        }
      ],
      "dependsOn": []
    },
    {
      "name": "Linear Structures",
      "children": [
        {
          "name": "Array",
          "children": [
            {
              "name": "insert",
              "comments": "O(n) for python"
            },
            {
              "name": "delete",
              "comments": "O(n)"
            },
            {
              "name": "search",
              "comments": "O(n)"
            }
          ],
          "url": "",
          "technos": [],
          "host": {},
          "dependents": [
            "SEO API",
            "SEO API",
            "SEO API"
          ]
        },
        {
          "name": "Stack",
          "children": [
            {
              "name": "push",
              "comments": "O(1)"
            },
            {
              "name": "pop",
              "comments": "O(1)"
            }
          ],
          "url": "",
          "technos": [],
          "host": {}
        },
        {
          "name": "Queue",
          "url": "",
          "technos": [],
          "host": {},
          "dependents": [
            "Jobs"
          ],
          "children": [
            {
              "name": "enqueue",
              "comments": "O(1)"
            },
            {
              "name": "dequeue",
              "comments": "O(1)"
            }
          ]
        },
        {
          "name": "Lists",
          "children": [
            {
              "name": "Linked List"
            }
          ]
        }
      ],
      "dependsOn": []
    },
    {
      "name": "Hash Tables",
      "children": [
        {
          "name": "insert (ht)",
          "comments": "O(1)"
        },
        {
          "name": "search (ht)",
          "comments": "O(1)"
        },
        {
          "name": "delete (ht)",
          "dependsOn": [],
          "comments": "O(1)"
        },
        {
          "name": "Disadvantages (ht)",
          "comments": "Based on arrays and thus hard to expand\n\n\"performance may degrade catastrophically when the table becomes too full\" - DSAA"
        },
        {
          "name": "Motivations (ht)"
        }
      ]
    }
  ]
}